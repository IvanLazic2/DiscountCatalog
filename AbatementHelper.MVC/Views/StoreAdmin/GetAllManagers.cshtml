@model PagedList.IPagedList<AbatementHelper.CommonModels.WebApiModels.WebApiManager>
@using PagedList.Mvc;
<link href="~/Content/PagedList.css" rel="stylesheet" type="text/css" />

@{
    ViewBag.Title = "GetAllManagers";
}

<h2>All managers</h2>

<p>
    @Html.ActionLink("Create New", "CreateManager")
</p>

@if (Model != null && Model.Count() != 0)
{
    using (Html.BeginForm("GetAllManagers", "StoreAdmin", FormMethod.Get))
    {
        <p>
            Find by name: @Html.TextBox("SearchString", ViewBag.CurrentFilter as string)
            <input type="submit" value="Search" />
        </p>
    }

    <table class="table">
        <tr>
            <th>
                @Html.ActionLink("UserName", "GetAllManagers", new { sortOrder = ViewBag.NameSortParm, currentFilter = ViewBag.CurrentFilter })
            </th>
            <th>
                FirstName
            </th>
            <th>
                LastName
            </th>
            <th>
                Email
            </th>
            <th>
                PhoneNumber
            </th>
            <th>
                StoreAdminName
            </th>
            <th>
                Country
            </th>
            <th>
                City
            </th>
            <th>
                PostalCode
            </th>
            <th>
                Street
            </th>
            <th>
                TwoFactorEnabled
            </th>
            <th>
                Stores
            </th>
            <th></th>
        </tr>


        @foreach (var item in Model)
        {
            if (!item.Deleted)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.UserName)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.FirstName)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.LastName)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Email)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.PhoneNumber)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.StoreAdminName)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Country)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.City)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.PostalCode)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Street)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.TwoFactorEnabled)
                    </td>
                    <td>
                        @{
                            foreach (var store in item.Stores)
                            {
                                @Html.ActionLink(store.StoreName + " ", "DetailsStore", new { id = store.Id })
                            }
                        }
                    </td>
                    <td>
                        @Html.ActionLink("Edit", "EditManager", new { id = item.Id })
                        @Html.ActionLink("Details", "DetailsManager", new { id = item.Id })
                        @Html.ActionLink("Delete", "DeleteManager", new { id = item.Id })
                        @Html.ActionLink("Assign stores", "GetAllManagerStores", new { id = item.Id })
                    </td>
                </tr>
            }
        }

    </table>
}
else
{
    <p class="text-danger">- No registered managers</p>
}

@Html.ActionLink("All deleted managers", "GetAllDeletedManagers")


<br />
Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount

@Html.PagedListPager(Model, page => Url.Action("GetAllManagers",
    new { page, sortOrder = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter }))